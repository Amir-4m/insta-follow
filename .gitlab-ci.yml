#workflow:
#  rules:
#    - if: $CI_COMMIT_REF_SLUG != $RELEASE
#      when: never
#    - when: always

stages:
  - build
  - test
  - deploy

variables:
  PROJECT_DIR: "insta_follow"
  PROJECT_ABR: "instaflw"

create container:
  stage: build
  script:
    - virtualenv -q $CI_PROJECT_DIR/venv
    - source $CI_PROJECT_DIR/venv/bin/activate
    - pip install -q -r requirements.txt
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - venv/
    policy: pull
  artifacts:
    paths:
      - venv/
  tags:
    - python

install packages:
  stage: build
  script:
    - source $CI_PROJECT_DIR/venv/bin/activate
    - pip install -q -r requirements.txt
  only:
    changes:
      - requirements.txt
  tags:
    - python

test:
  stage: test
  before_script:
    - cp /var/www/$PROJECT_DIR/project/.env $CI_PROJECT_DIR/
  script:
    - source $CI_PROJECT_DIR/venv/bin/activate
    - python manage.py check
  after_script:
    - rm $CI_PROJECT_DIR/.env
  tags:
    - django

.migrate:
  stage: migrate
  before_script:
    - cp /var/www/$PROJECT_DIR/project/.env $CI_PROJECT_DIR/
  script:
    - source $CI_PROJECT_DIR/venv/bin/activate
    - python manage.py makemigrations
  after_script:
    - rm $CI_PROJECT_DIR/.env
  only:
    changes:
      - apps/*/models.py
  tags:
    - django
    - staging

.deploy:
  before_script:
    - cd /var/www/$PROJECT_DIR/project/
    - source /var/www/$PROJECT_DIR/venv/bin/activate
  tags:
    - django

staging:
  stage: deploy
  extends: .deploy
  script:
    - git pull
    - pip install -r requirements.txt
    - python manage.py makemigrations
    - python manage.py migrate
    - uwsgi --reload /tmp/$PROJECT_DIR-master.pid
    - supervisorctl restart $PROJECT_ABR:*
  only:
    - develop
  tags:
    - staging

production:
  stage: deploy
  extends: .deploy
  script:
    - git pull
    - pip install -r requirements.txt
    - python manage.py migrate
    - uwsgi --reload /tmp/$PROJECT_DIR-master.pid
    - supervisorctl restart $PROJECT_ABR:*
  only:
    - master
    - tags
  tags:
    - release
